@page "/items"
@using Library
@inject IHttpClientFactory ClientFactory

<h2>Items</h2>
<div>
   <input placeholder="Something todo" @bind-value="newTodo" />
<button @onclick="AddTodo">Add todo</button> 
</div>
    <div>
        @foreach (var Item in displayTodo ?? Enumerable.Empty<TodoItem>())
        {
            <div>@Item.Text - @Item._id - @Item.IsComplete</div>
        }
    </div>

@code {
    private IEnumerable<TodoItem>? TodoItemList = Array.Empty<TodoItem>();
    public List<TodoItem>? displayTodo = new List<TodoItem>(); 
    private bool getTodoItemsError;
    private bool shouldRender;
    protected override bool ShouldRender() => shouldRender;
    public string? newTodo;
    public void AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            TodoItem ins = new TodoItem { Text = newTodo, IsComplete = false };
            displayTodo?.Add(ins);
            newTodo = string.Empty;
            InsertItem(ins);
        }
    }

    public async Task InsertItem(TodoItem postBody){
        var client = ClientFactory.CreateClient();
        using var response = await client.PostAsJsonAsync("http://localhost:5154/insert", postBody);
        shouldRender = true;
    }

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "http://localhost:5154/items");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            TodoItemList = await System.Text.Json.JsonSerializer.DeserializeAsync<IEnumerable<TodoItem>>(responseStream);
        }
        else
        {
            getTodoItemsError = true;
        }
        displayTodo = TodoItemList?.ToList<TodoItem>() ?? new List<TodoItem>();
        shouldRender = true;
    }
}