@page "/items"
@using Library
@inject IHttpClientFactory ClientFactory

<div class="flex flex-col p-20 bg-blue-100">
<div class="flex flex-col space-y-4 max-w-xl">
    <input class="rounded-lg" placeholder="Something todo" @bind-value="newTodo" />
    <button class="rounded-lg text-xl bg-blue-500 text-blue-100 hover:bg-blue-600 duration-300" @onclick="AddTodo">Add item</button>
</div>
<br/>
    <div class="flex flex-col space-y-4">
        @foreach (var Item in displayTodo ?? Enumerable.Empty<TodoItem>())
        {
            <div class="bg-white p-6 rounded-lg shadow-lg max-w-xl">
                <p class="text-2xl font-bold mb-2 text-gray-800 break-words">@Item.Text</p>
                <p class="text-gray-700">@Item.IsComplete</p>
                <p class="text-gray-500">@Item._id</p>
            </div>
        }
    </div>
</div>

@code {
    public List<TodoItem>? displayTodo = new List<TodoItem>(); 
    private bool getTodoItemsError;
    private bool shouldRender;
    protected override bool ShouldRender() => shouldRender;
    public string? newTodo;
    public async Task AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            TodoItem ins = new TodoItem { Text = newTodo, IsComplete = false };
            displayTodo?.Add(ins);
            newTodo = string.Empty;
            await InsertItem(ins);
        }
    }

    public async Task InsertItem(TodoItem postBody){
        var client = ClientFactory.CreateClient();
        using var response = await client.PostAsJsonAsync("http://localhost:5154/insert", postBody);
        shouldRender = true;
    }

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "http://localhost:5154/items");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            displayTodo = await System.Text.Json.JsonSerializer.DeserializeAsync<List<TodoItem>>(responseStream);
        }
        else
        {
            getTodoItemsError = true;
        }
        displayTodo = displayTodo?.ToList<TodoItem>() ?? new List<TodoItem>();
        shouldRender = true;
    }
}